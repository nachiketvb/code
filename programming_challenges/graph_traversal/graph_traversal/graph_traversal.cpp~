#include <iostream>
#include <vector>
#include <list>
#include <queue>

using namespace std;

enum color {
	RED,
	BLACK,
	UNCOLORED
};

struct edge_node {
	int vertex;
};

struct graph_node {
	list<edge_node> edges;
	color vertex_color;
	graph_node():vertex_color(UNCOLORED)
	{
	}
};

bool is_bicolorable(vector<graph_node> &adj_list)
{
	int num_vertices;
	num_vertices = adj_list.size();
	if (num_vertices == 0) {
		return true;
	}
	queue<int> vertex_queue;
	vertex_queue.push(0);
	adj_list[0].vertex_color = RED;
	while (!vertex_queue.empty()) {
		int current_vertex = vertex_queue.front();
		vertex_queue.pop();
		color current_color = adj_list[current_vertex].vertex_color;
		for (list<edge_node>::iterator itr = adj_list[current_vertex].edges.begin();
				itr != adj_list[current_vertex].edges.end(); ++itr) {
			if (adj_list[itr->vertex].vertex_color == UNCOLORED) {
				if (current_color == RED) {
					adj_list[itr->vertex].vertex_color = BLACK;
				} else {
					adj_list[itr->vertex].vertex_color = RED;
				}
				vertex_queue.push(itr->vertex);
			} else {
				if (current_color == adj_list[itr->vertex].vertex_color) {
					return false;
				}
			}
		}
	}
	return true;
}

int main()
{
	int n;
	cin >> n;
	while (n != 0) {
		vector<graph_node> adj_list(n);
		int num_edges;
		cin >> num_edges;
		for (int i = 0; i < num_edges; i++) {
			int vertex1, vertex2;
			cin >> vertex1 >> vertex2;
			edge_node edge1, edge2;
			edge1.vertex = vertex2;
			edge2.vertex = vertex1;
			adj_list[vertex1].edges.push_back(edge1);
			adj_list[vertex2].edges.push_back(edge2);
		}
		if (is_bicolorable(adj_list)) {
			cout << "BICOLORABLE" << endl;
		} else {
			cout << "NOT BICOLORABLE" << endl;
		}
		cin >> n;
	}
	return 0;
}
